가. Event 적용 과정
- 주문정보를 데이터 플랫폼으로 실시간 전송하기 위한 방안을 고민합니다.
- 도메인과 책임 분리, 결합도 완화 등의 관점에서 왜 Event를 사용해야 하는지 그 목적을 명확히 이해합니다.
- Event 구독과 발행에 필요한 정보, 흐름, Component, EventListener 등 필요요소들을 파악하고 적절하게 구성합니다.

나. Event를 활용하여 실시간 주문상품정보 전송을 진행합니다.
나-1. 핵심포인트
- 주문과 결제를 모두 완료한 이후에 주문정보를 데이터 플랫폼에 전송합니다.
- 기존 Order Facade에 모든 로직을 집중했던 구성을 메인로직과 부가로직으로 분리하여 구성합니다.
- 메인로직 완료 후 Publish하여 해당 관심사를 구독(Listen)하는 부가로직으로 분리함으로써 각각 책임을 나누어 진행합니다.
- 부가로직의 진행이 메인로직에 영향을 미치지 않도록 이벤트 발행/구독을 진행합니다.
나-2. 유의사항
- 최초 주문결제를 위한 Facade 서비스 호출, 독립적인 주문결제 서비스 진행으로부터 시작합니다.
- 그 이후 부가로직의 진행은 메인 로직의 커밋/롤백 등 특정 이벤트 이후에 발생합니다.
나-3. 유의해야할 점
- 부가로직) 주문과 결제까지 완료한 이후에 주문정보 전송이 이루어집니다
- 메인로직의 구독1) 결제로 인한 포인트 차감이 이루어지며 포인트 부족으로 인해 결제가 실패한다면 최초 주문결제 로직은 롤백되어야 합니다
- 메인로직의 구독2) 주문결제 Facade 서비스도 포인트 차감을 구독해야 합니다.

다. 도메인 및 책임(계층)을 설정합니다.
다-1. 주문 도메인
- 주문과 결제를 진행합니다.
다-2. event 도메인
- 메인로직(주문결제)를 구독하는 이벤트 리스너 및 부가 로직을 구성합니다.
- 이벤트 리스너를 구성하기 위한 Event 객체를 구성합니다.

라. 단위테스트 설계
- "이벤트 구독과 발행"이 "동작"하는지에 초점을 두어 단위 테스트를 구성합니다.
- 서비스 호출을 통해 리스너가 동작하는지 로그를 발생하는 등의 방법으로 테스트를 진행합니다.
- "구독에 의한 동작"이후 최종적인 부가로직의 결과까지 고려하는 것은 통합테스트로 진행해야 하지만, 결합도가 너무 커지기에 테스트 범주에서 제외합니다.

마. Event를 왜 사용하는지 책임분리와 함께 명확히 이해합니다.
- 단순히 Event 객체와 리스너 컴포넌트를 등록하는 것이 아닌 결합도가 높아질 수 있는 부가로직을 Event 도메인으로 위임한다의 개념입니다.
- Event 또한 AOP의 일종이며 이벤트 발행과 구독(후속동작), 나아가 트랜잭션의 완벽한 종료까지 보장할 수 있는 방법도 고민해보아야 할 것입니다.
- 테스트 코드를 작성하기 위한 테스트가 아닌 어떠한 관점에서 테스트를 진행해야 하며, 어느 곳에 초점을 둔 테스트 코드를 작성해야 할지 고민해야 합니다.
- 테스트 더블, 결합도 등을 고려하여 중복을 최소화하고 도메인의 목적을 명확히 알 수 있는 테스트를 설계하고 진행하는 것이 좋을 것입니다.
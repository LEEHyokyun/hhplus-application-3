1. product Id -> 또다시 RDB로 왜 왔다갔다 하는가?
-> 대용량 트래픽 기준에서 생각
-> 실시간 주문 성공될때마다 판매량을 증가하는 랭킹 혹은 집계 테이블에 증가 혹은 vice versa(주문 취소시 감소)
-> 동시성 이슈가 발생할 수도 있고..주문량이 많으면 많을수록 집계데이터에 대한 쓰기 부하가 지나치게 된다.
-> 동시성 이슈에 의한 단점이 redis가 유리할 수 밖에 없다.
-> 집계데이터를 어찌되었든 DB에 영속이 되어야 한다. 
-> 다만 실시간성 데이터를 포함되어있다면 레디스에 유리.
-> RDB에 들러서 저장하는거는 캐싱에 대한 얘기이다.

2. id말고 상품정보를 모두 저장?
-> 상품가격이나 상품명이 변경되지 않는 가정?
-> 레디스에 넣어놓고 갱신되어도..이것까지 챙겨주어야 한다.
-> 이것까지 반영해야하는 부담까지 생긴다.
-> 100만개 id만 가져도 되는 것을 .. 상품정보까지 들고있으면 Redis는 터진다.

3. 상품정보를 DB에서 가져와서 이에 대한 정보를 다시 Redis로 넣는 것은 캐시에 대한 이야기이다.
-> CachePut

현)
인기상품은 주문상품에서 쿼리를 직접

후)
인기상품 테이블을 별도로 만들어서 배치 프로세스로 특정 주기마다 주문 상품의 정보를 집계를 해서 통계데이터에 넣는다.
해당 데이터를 가지고 캐싱을 적용해놓는다.

인기상품데이터 테이블을 만들지 않고도 .. Redis만을 활용해서 Redis를 통해 조회해보라.
------------------------------------------------------------------------------------------------------------

인기상품의 정보를 Redis에 저장하는 것이 첫번째 목표
- 저장하는 시점은 주문이 완료가 되었을때.

스케쥴러를 5분마다 실행
최근 3일 데이터를 Redis에 넣는다.(집계 과정을 Redis에 넣는다) -> RDB를 통해 최종적으로 정보를 가져온다.
매번 쿼리를 통해 인기상품을 조회할 수는 없으니..
이 조회쿼리를 캐시풋으로 캐시를 그대로 갱신한다.

-----
Master - Slave 는 동기화가 전제.
만약 Master인 Redis를 바라보고 .. Slave Redis 동기화를 한다.
Master가 죽으면 Slave가 Master가 된다.
Redis는 하드디스크가 아니므로..메모리로 실무에서 많이 죽는다. 레디스 모니터링을 많이 요한다, 메모리 사용률이 60~70%하면 오토스케일링해서 구성한다.
Master - Slave는 까다롭기 때문에..레드락!
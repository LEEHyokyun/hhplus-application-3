가. Kafka 기초 개념 학습 과정
- 이전 주차에서 학습한 Event 기반의 동작을 Kafka에 어떻게 적용할 수 있을지 고민합니다.
- 부가로직을 수행하기 위해 필요한 컴포넌트와 이벤트 등 도메인 분리 혹은 하위 도메인 추가 등의 필요한 조치를 고민합니다.
- 부가로직이 원장 트랜잭션의 도메인에 속하는지, 별도의 도메인(외부)에 속하는지 구분합니다.
- 구분한 부가로직을 Spring Application Listener으로 처리해야 하는지, Kafka로 처리해야 하는지 파악합니다.
- Kafka의 개념과 활용목적, 구성요소, 내부적으로 메시징을 전달하는 흐름 등 Kafka의 기초 개념을 학습합니다.
- 대용량 트래픽 요청이 왔을때 동시성 제어와 순차 처리를 Kafka가 어떻게 보장할 수 있는지 이해합니다.

나. Kafka(Event)를 활용하여 실시간 주문상품정보 전송을 진행합니다[일전의 EventListener 흐름을 Kafka로 적용해보면서 이해합니다]
나-1. 핵심포인트
- 주문과 결제를 모두 완료한 이후에 주문정보를 데이터 플랫폼에 전송합니다.
- 메인(주문과 결제)로직 및 부가(주문정보를 데이터 플랫폼에 전송)로직을 분리합니다.
- 메인로직 진행 후 부가로직을 진행할 수 있는 내부흐름을 Kafka를 통해 구현합니다.
- 부가로직의 진행이 메인로직에 영향을 미치지 않도록 이벤트 발행/구독을 진행합니다.
나-2. 유의사항
- 메인로직과 부가로직의 자연스러운 도메인 분리와 의존성을 설정합니다.
- Producer와 Consumer를 어떻게 구성해야 할지, 어떤 서비스가 어디로 매칭이 되는지 확인합니다.
나-3. 유의해야할 점
- 부가로직) 주문과 결제까지 완료한 이후에 이벤트를 브로커에 저장하여 Consumer에 의해 주문정보 전송이 이루어집니다.
- 메인로직) 메인로직의 주문결제 완료 이후 Producer가 이벤트를 Broker에 저장합니다.

다. 도메인 및 책임(계층)을 설정합니다.
다-1. 주문 도메인
- 주문과 결제를 진행합니다.
다-2. 주문 내 Event 도메인
- 하나의 메인 도메인이 아니라 특정 도메인에 종속된 EventListener, Publisher 등을 구성합니다.
- 메인로직(주문결제)를 구독하는 이벤트 리스너 및 부가 로직을 구성합니다.
- 이벤트 리스너를 구성하기 위한 Event 객체를 구성합니다.
다-3. 주문 외 Kafka 도메인
- 카프카를 통해 이벤트를 활용할 KafkaProducer implements MessageProducer를 전역적 도메인으로 설정합니다.
- 역직렬화나 직렬화하는 책임은 Consumer와 Producer에게 있습니다.

라. 통합테스트 설계
- "이벤트 구독과 발행"이 "동작"하는지에 초점을 두어 각 컴포넌트의 상호작용을 테스트하기 위한 통합 테스트를 구성합니다.
- 서비스 호출을 통해 리스너가 동작하는지 로그를 발생하는 등의 방법으로 테스트를 진행합니다.

마. Kafka(Event)를 왜 사용하는지 책임분리와 함께 명확히 이해합니다.
- 주문통합서비스를 호출하여 후행 서비스 동작 여부까지 검증하는 것은 단위테스트가 아닌 "통합테스트"의 범주입니다.
- 이에 맞는 도메인 분리와 컴포넌트 구성을 적절하게 진행합니다.
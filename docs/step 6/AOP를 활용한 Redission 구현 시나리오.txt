가. Redission Lock 적용 과정
- 별도의 도메인 분리를 하지 않고 AOP를 통해 트랜잭션 전후로 Distributed Lock 설정하여 동시성을 보장할 수 있도록 합니다.


나. 분산락을 적용할 기능을 선정합니다.
- 기존 구현한 pointService의 충전(charge)을 활용하여 분산락을 적용하고자 합니다.
- 분산락은 서비스의 요청을 초점에 맞추어, 요청이 다량 발생하였을때 이에 대한 부하 분산을 의도한 상황에 적용하는 것이 적합할 것입니다.
- 분산락의 목적 등에 의해 상품재고차감 등의 기능에 적용하는 것이 더 적합하다고 생각하고 있습니다.
- 그러나 현재 여건 및 부족한 시간 관계 상 일단 현재 구현한 소스를 기반으로 적용하기 위해 충전 기능에 일단 분산락을 적용할 예정입니다.
- 이후 확장해나가면서 학습범위를 넓힐 계획입니다.

다. 도메인을 설정합니다.
- 

라. 통합테스트 설계
- Lettuce와 마찬가지로 Redis와 Point charge 서비스의 도메인을 분리하여 각각의 책임을 명확히 분리하였습니다.
- 각 분리된 도메인의 결합 서비스를 테스트한다는 과정으로 보았을때 통합테스트의 범주로 간주하는 것이 적합하다 생각하였습니다.

마. 분산락 전략을 사용하는 목적
- 여러 DB를 보유하고 있는 환경일 경우 DB Row를 통한 동시성 제어가 불가능하므로 그 범위를 넓히고 동시성 제어가 가능한 외부 저장소가 필요합니다.
- 분산락은 DB Row가 아닌 사용자 요청을 제어하므로 DB의 동시성 제어 책임을 Redis로 이관하여 그 부하를 경감시킬 수 있습니다.
- 분산락은 "사용자의 요청에 대해 동시성 제어가 필요할때 가장 효율적인 방법을 제공하는 도구이다"라는 관점에서 접근해야 할 것입니다.